openapi: "3.0.3"
info:
  title: "Application API"
  description: "Application API"
  version: "1.0.0"
servers:
  - url: "http://0.0.0.0:8080"
paths:
  /:
    get:
      description: "Hello World!"
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"

  /register:
    post:
      requestBody:
        description: User registration
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: your.email@test.com
                  description: The user's email address.
                nickname:
                  type: string
                  example: nagibator228
                  description: The user's nickname.
                age:
                  type: integer
                  example: 95
                  description: The user's age.
                password:
                  type: string
                  format: password
                  example: secret12345(bad example)
                  description: The user's password.
              required:
                - email
                - nickname
                - age
                - password
      description: "Route to register new user"
      responses:
        "201":
          description: "CREATED"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User TEST! was created"
        "409":
          description: "CONFLICT"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "USER ALREADY EXISTS"

  /login:
    post:
      requestBody:
        description: Login route
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: your.email@test.com
                  description: The user's email address.
                password:
                  type: string
                  format: password
                  example: secret12345
                  description: User's password
              required:
                - email
                - password
      description: "Route to login"
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The JWT token.
        401:
          description: Unauthorized - Wrong credentials
        406:
          description: Not Acceptable - Format not supported

  /logout:
    post:
      summary: "Log out the current user"
      description: "Removes the authentication token from cookies"
      security:
        - jwt-auth: [ ]
      responses:
        200:
          description: "User logged out successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully!"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized request"


  /user/all:
    get:
      description: "Get all users from db"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
        "401":
          description: "UNAUTHORIZED"
          content:
            application/json:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Access denied!"

  /user/profile:
    get:
      description: "Get current"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
        "401":
          description: "UNAUTHORIZED"
          content:
            application/json:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Access denied!"

  /user/delete:
    delete:
      summary: "Delete a user account"
      description: "Deletes the authenticated user's account permanently."
      responses:
        200:
          description: "User deleted successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully!"
        401:
          description: "Unauthorized request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized request"
        500:
          description: "Failed to delete user"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to delete user!"


  /goal/create:
    post:
      requestBody:
        description: Goal creation
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                goalName:
                  type: string
                  format: text
                  example: read a book every day
                  description: shortly name your goal
                startDate:
                  type: string
                  example: 12.11.2004
                  description: enter the date when you're planning to start
                endDate:
                  type: string
                  example: 12.11.2005
                  description: (optional)

              required:
                - goalName
                - startDate
                - endDate
      description: "Route to create a new goal"
      responses:
        "201":
          description: "CREATED"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Goal was created"
        "409":
          description: "CONFLICT"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Something went wrong"

  /goal/all:
    get:
      description: "Get all goals set in the db"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
        "401":
          description: "UNAUTHORIZED"
          content:
            application/json:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Access denied!"

  /goal/{id}/delete:
    delete:
      summary: "Delete a goal"
      description: "Deletes a goal by its ID."
      security:
        - jwt-auth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: "The ID of the goal to delete."
      responses:
        200:
          description: "Goal successfully deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Goal has been deleted!"
        400:
          description: "Invalid goal ID"
        401:
          description: "Unauthorized request"
        404:
          description: "Goal not found"

  /goal/user/{user_id}:
    get:
      summary: "Get user's goal"
      description: "Get goal by user is."
      security:
        - jwt-auth: [ ]
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: "The ID of the goal"
      responses:
        200:
          description: "List of goals"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "{Goal1}}"
        400:
          description: "Invalid user ID"
        401:
          description: "Unauthorized request"
        404:
          description: "User is not found"

  /goal/{id}/add_date:
    post:
      summary: "Add a new completed date to a goal"
      description: "Appends a new date to the `done_dates` field for a given goal."
      security:
        - jwt-auth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: "The ID of the goal."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              properties:
                date:
                  type: string
                  example: "14.11.2025"
                  description: "The date to be added."
      responses:
        200:
          description: "Date added successfully."
        400:
          description: "Invalid goal ID."
        401:
          description: "Unauthorized request."



components:
  schemas: { }